openapi: "3.0.3"
info:
  title: UBM Canteen REST API
  version: "1.0.0"
  description: "API spec for the RESTful API at UBM Canteen"
  contact:
    name: Jonathan Farrel Emanuel
    email: tomhollandandrewtobey1158@gmail.com
servers:
  - url: https://api.ubmcanteen.com
    description: SaaS Supabase AWS Singapore domain

tags:
  - name: Authentication
    description: Endpoints for user authentication
  - name: Production
    description: Endpoints for managing canteen products

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register seller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Register"

      responses:
        "201":
          description: Seller created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResgisterSuccess"

        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500"

  /login:
    get:
      tags:
        - Authentication
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"

      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginSuccess"

        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error400"

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error401"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error500"

components:
  schemas:
    Register:
      type: object
      required:
        - id_seller
        - nama_seller
        - email
        - password
        - phone_num
        - kontrak_canteen
        - profile_pic
        - role
      properties:
        id_seller:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: "user123@gmail.com"
        password:
          type: string
          format: password
          example: "securePassword123"
        nama:
          type: string
          format: nama
          example: Jonathan Farrel Emanuel
        phone_num:
          type: integer
          format: phone_num
          example: 6281312341234
        kontrak_canteen:
          type: string
          format: uri
          example: http://example.com/kontrak.pdf

        profile_pic:
          type: string
          format: byte
          example: base64_encoded_string_here

    ResgisterSuccess:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
          example: User successfully registered
        data:
          type: object
          properties:
            email:
              type: string
              format: email
              example: user123@gmail.com
            password:
              type: string
              format: password
              example: securePassword123
            nama_user:
              type: string
              format: nama_user
              example: user123
            phone_num:
              type: integer
              format: phone_num
              example: 6281312341234
            kontrak_canteen:
              type: string
              format: uuid
              example: http://example.com/kontrak.pdf
            profile_pic:
              type: string
              format: byte
              example: base64_encoded_string_here
    Login:
      type: object
      oneOf:
        - required:
            - email
            - password
          properties:
            email:
              type: string
              format: email
              example: "user123@gmail.com"
            password:
              type: string
              format: password
              example: "securePassword123"
        - required:
            - googleToken
          properties:
            googleToken:
              type: string
              example: "ya29.a0ARrdaM..."

    LoginSuccess:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: User successfully logged in
        data:
          type: object
          properties:
            email:
              type: string
              format: email
              example: user123@gmail.com
            password:
              type: string
              format: password
              example: securePassword123
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsIn..."

    Error400:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: Invalid input

    Error500:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: Internal server error

    Error401:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
          example: Unauthorized
